{
  "stats": {
    "suites": 3,
    "tests": 2,
    "passes": 2,
    "pending": 0,
    "failures": 0,
    "start": "2022-05-31T19:10:40.247Z",
    "end": "2022-05-31T19:10:40.601Z",
    "duration": 354,
    "testsRegistered": 2,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e5414f73-06d9-40a7-b99c-881dfdf9faf1",
      "title": "",
      "fullFile": "cypress/integration/Usuarios/GET-users.spec.js",
      "file": "cypress/integration/Usuarios/GET-users.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "af5ee0ca-11ae-4bc2-9f5e-77b68a67fbd2",
          "title": "Given the users api",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "aacba35e-a348-440f-88c9-2daeab5c67b3",
              "title": "When I send GET /usuarios",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should return a list with all registered users",
                  "fullTitle": "Given the users api When I send GET /usuarios Then it should return a list with all registered users",
                  "timedOut": null,
                  "duration": 262,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: \"GET\",\n  url: \"/usuarios\"\n}).should(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.quantidade).to.eq(response.body.usuarios.length);\n  Cypress._.each(response.body.usuarios, usuario => {\n    expect(usuario.email).to.not.be.null;\n    expect(usuario).to.have.all.keys(\"nome\", \"email\", \"password\", \"administrador\", \"_id\");\n  });\n});",
                  "err": {},
                  "uuid": "51962513-d680-44a3-9352-b720c29a3ff9",
                  "parentUUID": "aacba35e-a348-440f-88c9-2daeab5c67b3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "51962513-d680-44a3-9352-b720c29a3ff9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 262,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "818da7ad-f6f9-44ec-b553-7ae692582a85",
              "title": "When I send GET /usuarios passing id query param",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Then it should return only the filtered user",
                  "fullTitle": "Given the users api When I send GET /usuarios passing id query param Then it should return only the filtered user",
                  "timedOut": null,
                  "duration": 59,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: \"GET\",\n  url: \"/usuarios\",\n  qs: {\n    _id: \"0uxuPY0cbmQhpEz1\"\n  }\n}).should(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.usuarios[0].nome).to.eq(\"Fulano da Silva\");\n});",
                  "err": {},
                  "uuid": "d9b9ec5d-6b92-410a-b8c5-5a1901f62feb",
                  "parentUUID": "818da7ad-f6f9-44ec-b553-7ae692582a85",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d9b9ec5d-6b92-410a-b8c5-5a1901f62feb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 59,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reporterDir": "mochawesome-report",
        "quiet": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}